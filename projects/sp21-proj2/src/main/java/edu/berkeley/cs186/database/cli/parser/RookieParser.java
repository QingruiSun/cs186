/* RookieParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. RookieParser.java */
package edu.berkeley.cs186.database.cli.parser;

@SuppressWarnings("all")
public class RookieParser/*@bgen(jjtree)*/implements RookieParserTreeConstants, RookieParserConstants {/*@bgen(jjtree)*/
  protected JJTRookieParserState jjtree = new JJTRookieParserState();

  final public ASTSQLStatementList sql_stmt_list() throws ParseException {/*@bgen(jjtree) SQLStatementList */
  ASTSQLStatementList jjtn000 = new ASTSQLStatementList(JJTSQLSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SCOL:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(SCOL);
      }
      sql_stmt();
      label_2:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
        label_3:
        while (true) {
          jj_consume_token(SCOL);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SCOL:{
            ;
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            break label_3;
          }
        }
        sql_stmt();
      }
      label_4:
      while (true) {
        jj_consume_token(SCOL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SCOL:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_4;
        }
      }
jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void sql_stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_SELECT:{
      select_stmt();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      if (jj_2_2(2)) {
        create_table_stmt();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_CREATE:{
          create_index_stmt();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          if (jj_2_3(2)) {
            drop_table_stmt();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case K_DROP:{
              drop_index_stmt();
              break;
              }
            case K_INSERT:{
              insert_stmt();
              break;
              }
            case K_DELETE:{
              delete_stmt();
              break;
              }
            case K_BEGIN:{
              begin_stmt();
              break;
              }
            case K_END:
            case K_COMMIT:{
              commit_stmt();
              break;
              }
            case K_ROLLBACK:{
              rollback_stmt();
              break;
              }
            case K_SAVEPOINT:{
              savepoint_stmt();
              break;
              }
            case K_RELEASE:{
              release_stmt();
              break;
              }
            case K_EXPLAIN:{
              explain_stmt();
              break;
              }
            default:
              jj_la1[5] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
}

  final public void explain_stmt() throws ParseException {/*@bgen(jjtree) ExplainStatement */
  ASTExplainStatement jjtn000 = new ASTExplainStatement(JJTEXPLAINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_EXPLAIN);
      select_stmt();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void drop_table_stmt() throws ParseException {/*@bgen(jjtree) DropTableStatement */
  ASTDropTableStatement jjtn000 = new ASTDropTableStatement(JJTDROPTABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DROP);
      jj_consume_token(K_TABLE);
      table_name();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void drop_index_stmt() throws ParseException {/*@bgen(jjtree) DropIndexStatement */
  ASTDropIndexStatement jjtn000 = new ASTDropIndexStatement(JJTDROPINDEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DROP);
      jj_consume_token(K_INDEX);
      table_name();
      jj_consume_token(OPEN_PAR);
      column_name();
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void release_stmt() throws ParseException {/*@bgen(jjtree) ReleaseStatement */
  ASTReleaseStatement jjtn000 = new ASTReleaseStatement(JJTRELEASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_RELEASE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_SAVEPOINT:{
        jj_consume_token(K_SAVEPOINT);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void savepoint_stmt() throws ParseException {/*@bgen(jjtree) SavepointStatement */
  ASTSavepointStatement jjtn000 = new ASTSavepointStatement(JJTSAVEPOINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SAVEPOINT);
      identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void rollback_stmt() throws ParseException {/*@bgen(jjtree) RollbackStatement */
  ASTRollbackStatement jjtn000 = new ASTRollbackStatement(JJTROLLBACKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ROLLBACK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_TRANSACTION:{
        jj_consume_token(K_TRANSACTION);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_TO:{
        jj_consume_token(K_TO);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_SAVEPOINT:{
          jj_consume_token(K_SAVEPOINT);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        identifier();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void begin_stmt() throws ParseException {/*@bgen(jjtree) BeginStatement */
  ASTBeginStatement jjtn000 = new ASTBeginStatement(JJTBEGINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BEGIN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_TRANSACTION:{
        jj_consume_token(K_TRANSACTION);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void commit_stmt() throws ParseException {/*@bgen(jjtree) CommitStatement */
  ASTCommitStatement jjtn000 = new ASTCommitStatement(JJTCOMMITSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_COMMIT:{
        jj_consume_token(K_COMMIT);
        break;
        }
      case K_END:{
        jj_consume_token(K_END);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_TRANSACTION:{
        jj_consume_token(K_TRANSACTION);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void insert_stmt() throws ParseException {/*@bgen(jjtree) InsertStatement */
  ASTInsertStatement jjtn000 = new ASTInsertStatement(JJTINSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_INSERT);
      jj_consume_token(K_INTO);
      table_name();
      jj_consume_token(K_VALUES);
      jj_consume_token(OPEN_PAR);
      literal();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        literal();
      }
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void select_stmt() throws ParseException {/*@bgen(jjtree) SelectStatement */
  ASTSelectStatement jjtn000 = new ASTSelectStatement(JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      select_clause();
      from_clause();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WHERE:{
        jj_consume_token(K_WHERE);
        binary_expression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_AND:{
          jj_consume_token(K_AND);
          binary_expression();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_GROUP:{
        jj_consume_token(K_GROUP);
        jj_consume_token(K_BY);
        column_name();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          column_name();
        }
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_LIMIT:{
        jj_consume_token(K_LIMIT);
        limit();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void delete_stmt() throws ParseException {/*@bgen(jjtree) DeleteStatement */
  ASTDeleteStatement jjtn000 = new ASTDeleteStatement(JJTDELETESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DELETE);
      jj_consume_token(K_FROM);
      table_name();
      jj_consume_token(K_WHERE);
      binary_expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void create_table_stmt() throws ParseException {/*@bgen(jjtree) CreateTableStatement */
  ASTCreateTableStatement jjtn000 = new ASTCreateTableStatement(JJTCREATETABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CREATE);
      jj_consume_token(K_TABLE);
      table_name();
      jj_consume_token(OPEN_PAR);
      column_def();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        column_def();
      }
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void create_index_stmt() throws ParseException {/*@bgen(jjtree) CreateIndexStatement */
  ASTCreateIndexStatement jjtn000 = new ASTCreateIndexStatement(JJTCREATEINDEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CREATE);
      jj_consume_token(K_INDEX);
      jj_consume_token(K_ON);
      table_name();
      jj_consume_token(OPEN_PAR);
      column_name();
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void column_def() throws ParseException {/*@bgen(jjtree) ColumnDef */
    ASTColumnDef jjtn000 = new ASTColumnDef(JJTCOLUMNDEF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Object[] components = {null, null, null};
    try {
      components[0] = identifier();
      components[1] = identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_PAR:{
        jj_consume_token(OPEN_PAR);
        components[2] = jj_consume_token(NUMERIC_LITERAL);
        jj_consume_token(CLOSE_PAR);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.value = components;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void select_clause() throws ParseException {/*@bgen(jjtree) SelectClause */
  ASTSelectClause jjtn000 = new ASTSelectClause(JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SELECT);
      result_column_name();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        result_column_name();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void limit() throws ParseException {/*@bgen(jjtree) Limit */
 ASTLimit jjtn000 = new ASTLimit(JJTLIMIT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMERIC_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.value = t.image;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

//TODO: aliasing
//TODO: temporary tables
  final public void from_clause() throws ParseException {/*@bgen(jjtree) FromClause */
  ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FROM);
      aliased_table_name();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_INNER:
        case K_JOIN:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_9;
        }
        joined_table();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
}

  final public void joined_table() throws ParseException {/*@bgen(jjtree) JoinedTable */
 ASTJoinedTable jjtn000 = new ASTJoinedTable(JJTJOINEDTABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);ASTColumnName[] columns = {null, null};
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_INNER:{
        jj_consume_token(K_INNER);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(K_JOIN);
      aliased_table_name();
      jj_consume_token(K_ON);
      columns[0] = column_name();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
        break;
        }
      case EQEQ:{
        jj_consume_token(EQEQ);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      columns[1] = column_name();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.value = columns;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void result_column_name() throws ParseException {/*@bgen(jjtree) ResultColumnName */
 ASTResultColumnName jjtn000 = new ASTResultColumnName(JJTRESULTCOLUMNNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t1; Token t2 = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        jj_consume_token(STAR);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.value = "*";
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        if (jj_2_4(2)) {
          t1 = jj_consume_token(IDENTIFIER);
          jj_consume_token(OPEN_PAR);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:{
            t2 = jj_consume_token(IDENTIFIER);
            break;
            }
          case STAR:{
            t2 = jj_consume_token(STAR);
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(CLOSE_PAR);
jjtree.closeNodeScope(jjtn000, true);
                                                                                            jjtc000 = false;
jjtn000.value = t1.image + "(" + t2.image + ")";
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:{
            t1 = jj_consume_token(IDENTIFIER);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case DOT:{
              jj_consume_token(DOT);
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case IDENTIFIER:{
                t2 = jj_consume_token(IDENTIFIER);
                break;
                }
              case STAR:{
                t2 = jj_consume_token(STAR);
                break;
                }
              default:
                jj_la1[26] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
              }
            default:
              jj_la1[27] = jj_gen;
              ;
            }
jjtree.closeNodeScope(jjtn000, true);
                                                                 jjtc000 = false;
jjtn000.value = t2 != null ? t1.image + "." + t2.image : t1.image;
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public ASTColumnName column_name() throws ParseException {/*@bgen(jjtree) ColumnName */
 ASTColumnName jjtn000 = new ASTColumnName(JJTCOLUMNNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t1; Token t2=null;
    try {
      t1 = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        t2 = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
jjtn000.value = t2 != null ? t1.image + "." + t2.image : t1.image;
        {if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String table_name() throws ParseException {/*@bgen(jjtree) TableName */
 ASTTableName jjtn000 = new ASTTableName(JJTTABLENAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.value = t.image;
        {if ("" != null) return t.image;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String identifier() throws ParseException {/*@bgen(jjtree) #Identifier(true) */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.value = t.image;
        {if ("" != null) return t.image;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void aliased_table_name() throws ParseException {/*@bgen(jjtree) AliasedTableName */
 ASTAliasedTableName jjtn000 = new ASTAliasedTableName(JJTALIASEDTABLENAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String[] names = {null, null};
    try {
      names[0] = table_name();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_AS:{
        jj_consume_token(K_AS);
        names[1] = table_name();
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
jjtn000.value = names;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void binary_expression() throws ParseException {/*@bgen(jjtree) BinaryExpression */
 ASTBinaryExpression jjtn000 = new ASTBinaryExpression(JJTBINARYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Object[] components = {null, null, null}; jjtn000.value = components;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        components[0] = column_name();
        components[1] = binary_operator();
        components[2] = literal();
        break;
        }
      case FALSE:
      case TRUE:
      case NUMERIC_LITERAL:
      case STRING_LITERAL:{
        components[0] = literal();
        components[1] = binary_operator();
        components[2] = column_name();
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public String literal() throws ParseException {/*@bgen(jjtree) Literal */
 ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:{
        t = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
        break;
        }
      case NUMERIC_LITERAL:{
        t = jj_consume_token(NUMERIC_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
        break;
        }
      case TRUE:{
        t = jj_consume_token(TRUE);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
        break;
        }
      case FALSE:{
        t = jj_consume_token(FALSE);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
}

  final public String binary_operator() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:{
      t = jj_consume_token(EQ);
{if ("" != null) return t.image;}
      break;
      }
    case EQEQ:{
      t = jj_consume_token(EQEQ);
{if ("" != null) return t.image;}
      break;
      }
    case NOT_EQ1:{
      t = jj_consume_token(NOT_EQ1);
{if ("" != null) return t.image;}
      break;
      }
    case NOT_EQ2:{
      t = jj_consume_token(NOT_EQ2);
{if ("" != null) return t.image;}
      break;
      }
    case LT_EQ:{
      t = jj_consume_token(LT_EQ);
{if ("" != null) return t.image;}
      break;
      }
    case LT:{
      t = jj_consume_token(LT);
{if ("" != null) return t.image;}
      break;
      }
    case GT_EQ:{
      t = jj_consume_token(GT_EQ);
{if ("" != null) return t.image;}
      break;
      }
    case GT:{
      t = jj_consume_token(GT);
{if ("" != null) return t.image;}
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(45)) return false;
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(K_BEGIN)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_13()) return false;
    jj_scanpos = xsp;
    if (!jj_3_2()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_14()) return false;
    jj_scanpos = xsp;
    if (!jj_3_3()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_15()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_16()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_17()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_18()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_19()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_20()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_21()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_22()) return false;
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(K_CREATE)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(K_ROLLBACK)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(K_CREATE)) return true;
    if (jj_scan_token(K_TABLE)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(K_SAVEPOINT)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(K_DELETE)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(K_RELEASE)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(K_DROP)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(K_DROP)) return true;
    if (jj_scan_token(K_TABLE)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(K_INSERT)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(K_EXPLAIN)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    if (jj_scan_token(5)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(5)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RookieParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x20,0x20,0x20,0x10000000,0x0,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x200,0x0,0x0,0x200,0x80,0x200,0xc0000000,0x40000000,0x18000,0x400,0x400,0x40,0x400,0x0,0x40,0x400000,0x180000,0x180000,0x7f800,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x40,0xdb880,0x8000,0x4000,0x8000,0x20000,0x4000,0x3000,0x4000,0x0,0x4,0x2,0x0,0x8,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x0,0x0,0x10000000,0x0,0x0,0x18800000,0x8800000,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RookieParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RookieParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e.getMessage()); }
	 token_source = new RookieParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e.getMessage()); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RookieParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RookieParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RookieParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RookieParser(RookieParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RookieParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 35; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }

/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
		 int[] oldentry = (int[])(it.next());
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }
		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[61];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 35; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 61; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = (int[])jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 4; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);
		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
